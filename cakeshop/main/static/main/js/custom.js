document.addEventListener('DOMContentLoaded', () => {
  const fileInput = document.querySelector('.file-icon input[type="file"]');
  const attachedFilesText = document.querySelector('.attached-files');

  fileInput.addEventListener('change', function () {
    const files = Array.from(this.files).map(file => file.name).join(', ');
    attachedFilesText.textContent = files || '–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã';
  });

  const modals = {
    cake: document.getElementById('cake-modal'),
    cake2: document.getElementById('cake2-modal'),
    cream: document.getElementById('cream-modal'),
    design: document.getElementById('design-modal')
  };

  let currentLayerKey = null;
  let selectedOption = null;

  // üî• –ö–ª–∏–∫ –ø–æ —Å–≤–µ—á–∞–º
  const candles = document.querySelector('.candles');
  if (candles) {
    candles.style.cursor = 'pointer';
    candles.addEventListener('click', () => openModal('design'));
  }

  // üî• –ö–ª–∏–∫ –ø–æ —Å–ª–æ—è–º
  document.querySelectorAll('[data-layer].clickable').forEach(el => {
    el.addEventListener('click', () => openModal(el.dataset.layer));
  });

  // üî• –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
  function openModal(key) {
    currentLayerKey = key;
    selectedOption = null;

    document.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));

    // –ü–æ–∫–∞–∑–∞—Ç—å –Ω—É–∂–Ω—É—é –º–æ–¥–∞–ª–∫—É
    const modal = modals[key];
    if (modal) {
      modal.classList.remove('hidden');

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
      setTimeout(() => {
        function closeOnOutsideClick(e) {
          if (!modal.contains(e.target)) {
            closeModal();
            document.removeEventListener('mousedown', closeOnOutsideClick);
          }
        }

        document.addEventListener('mousedown', closeOnOutsideClick);
      }, 0);
    }
  }

  // üî• –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª–æ–∫
  function closeModal() {
    Object.values(modals).forEach(modal => modal.classList.add('hidden'));
    currentLayerKey = null;
    selectedOption = null;
  }

  // üî• –ö—Ä–µ—Å—Ç–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
  document.querySelectorAll('.close-btn').forEach(btn => {
    btn.addEventListener('click', e => {
      e.stopPropagation();
      closeModal();
    });
  });

  // üî• –í—ã–±–æ—Ä –æ–ø—Ü–∏–∏
  document.querySelectorAll('.option').forEach(option => {
    option.addEventListener('click', () => {
      document.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));
      option.classList.add('selected');
      selectedOption = option;
    });
  });

  // üî• –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const confirmButtons = {
    cake: document.getElementById('confirm-layer-btn-cake1'),
    cake2: document.getElementById('confirm-layer-btn-cake2'),
    cream: document.getElementById('confirm-layer-btn'),
    design: document.getElementById('confirm-design-btn')
  };

  Object.entries(confirmButtons).forEach(([key, btn]) => {
    if (!btn) return;

    btn.addEventListener('click', () => {
      if (!selectedOption || currentLayerKey !== key) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é');
        return;
      }

      const newText = selectedOption.dataset.text;
      const newClass = selectedOption.dataset.class;

      // === –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∫–æ—Ä–∂–µ–π ‚Äî –º–µ–Ω—è–µ–º –æ–±–∞ ===
      if (key === 'cake' || key === 'cake2') {
        ['cake', 'cake2'].forEach(layerKey => {
          document.querySelectorAll(`[data-layer="${layerKey}"]`).forEach(el => {
            if (el.classList.contains('layer')) {
              el.className = `layer ${newClass} clickable`;

              const img = el.querySelector('img');
              if (img) {
                img.src = window.STATIC_URL + `main/img/boxes/${newClass}.png`;
                img.alt = newText;
              }
            } else if (el.classList.contains('text')) {
              el.textContent = newText;
            }
          });
        });
      }

      // === –ö—Ä–µ–º
      else if (key === 'cream') {
        document.querySelectorAll('[data-layer="cream"]').forEach(el => {
          if (el.classList.contains('layer')) {
            el.className = `layer ${newClass} clickable`;

            const img = el.querySelector('img');
            if (img) {
              img.src = window.STATIC_URL + `main/img/boxes/${newClass}.png`;
              img.alt = newText;
            }
          } else if (el.classList.contains('text')) {
            el.textContent = newText;
          }
        });
      }

      // === –î–∏–∑–∞–π–Ω (—Å–≤–µ—á–∏ ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
      else if (key === 'design') {
        document.querySelectorAll('[data-layer="design"]').forEach(el => {
          if (el.classList.contains('text')) {
            el.textContent = newText;
          }
        });
      }

      closeModal();
    });
  });
});
document.addEventListener('DOMContentLoaded', () => {
  const fileInput = document.querySelector('.file-icon input[type="file"]');
  const attachedFilesText = document.querySelector('.attached-files');

  fileInput.addEventListener('change', function () {
    const files = Array.from(this.files).map(file => file.name).join(', ');
    attachedFilesText.textContent = files || '–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã';
  });

  const modals = {
    cake: document.getElementById('cake-modal'),
    cake2: document.getElementById('cake2-modal'),
    cream: document.getElementById('cream-modal'),
    design: document.getElementById('design-modal')
  };

  let currentLayerKey = null;
  let selectedOption = null;

  // üî• –ö–ª–∏–∫ –ø–æ —Å–≤–µ—á–∞–º
  const candles = document.querySelector('.candles');
  if (candles) {
    candles.style.cursor = 'pointer';
    candles.addEventListener('click', () => openModal('design'));
  }

  // üî• –ö–ª–∏–∫ –ø–æ —Å–ª–æ—è–º
  document.querySelectorAll('[data-layer].clickable').forEach(el => {
    el.addEventListener('click', () => openModal(el.dataset.layer));
  });

  // üî• –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
  function openModal(key) {
    currentLayerKey = key;
    selectedOption = null;

    document.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));

    const modal = modals[key];
    if (modal) {
      modal.classList.remove('hidden');
      setTimeout(() => {
        function closeOnOutsideClick(e) {
          if (!modal.contains(e.target)) {
            closeModal();
            document.removeEventListener('mousedown', closeOnOutsideClick);
          }
        }
        document.addEventListener('mousedown', closeOnOutsideClick);
      }, 0);
    }
  }

  function closeModal() {
    Object.values(modals).forEach(modal => modal.classList.add('hidden'));
    currentLayerKey = null;
    selectedOption = null;
  }

  document.querySelectorAll('.close-btn').forEach(btn => {
    btn.addEventListener('click', e => {
      e.stopPropagation();
      closeModal();
    });
  });

  document.querySelectorAll('.option').forEach(option => {
    option.addEventListener('click', () => {
      document.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));
      option.classList.add('selected');
      selectedOption = option;
    });
  });

  const confirmButtons = {
    cake: document.getElementById('confirm-layer-btn-cake1'),
    cake2: document.getElementById('confirm-layer-btn-cake2'),
    cream: document.getElementById('confirm-layer-btn'),
    design: document.getElementById('confirm-design-btn')
  };

  Object.entries(confirmButtons).forEach(([key, btn]) => {
    if (!btn) return;
    btn.addEventListener('click', () => {
      if (!selectedOption || currentLayerKey !== key) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é');
        return;
      }

      const newText = selectedOption.dataset.text;
      const newClass = selectedOption.dataset.class;

      if (key === 'cake' || key === 'cake2') {
        ['cake', 'cake2'].forEach(layerKey => {
          document.querySelectorAll(`[data-layer="${layerKey}"]`).forEach(el => {
            if (el.classList.contains('layer')) {
              el.className = `layer ${newClass} clickable`;
              const img = el.querySelector('img');
              if (img) img.src = window.STATIC_URL + `main/img/boxes/${newClass}.png`;
              if (img) img.alt = newText;
            } else if (el.classList.contains('text')) el.textContent = newText;
          });
        });
      } else if (key === 'cream') {
        document.querySelectorAll('[data-layer="cream"]').forEach(el => {
          if (el.classList.contains('layer')) {
            el.className = `layer ${newClass} clickable`;
            const img = el.querySelector('img');
            if (img) img.src = window.STATIC_URL + `main/img/boxes/${newClass}.png`;
            if (img) img.alt = newText;
          } else if (el.classList.contains('text')) el.textContent = newText;
        });
      } else if (key === 'design') {
        document.querySelectorAll('[data-layer="design"]').forEach(el => {
          if (el.classList.contains('text')) el.textContent = newText;
        });
      }

      closeModal();
      updatePrice();
    });
  });

  // üî• –†–∞—Å—á—ë—Ç —Ü–µ–Ω—ã
  const priceRow = document.querySelector('.price-row.total span:last-child');

function updatePrice() {
  let price = 0;

  // –†–∞–∑–º–µ—Ä
  const size = document.querySelector('input[name="count"]:checked')?.parentNode.textContent;
  if (size?.includes('–ë–µ–Ω—Ç–æ')) price += 1200;
  else if (size?.includes('–ù–µ–±–æ–ª—å—à–æ–π')) price += 2200;
  else if (size?.includes('–°—Ä–µ–¥–Ω–∏–π')) price += 3500;
  else if (size?.includes('–ë–æ–ª—å—à–æ–π')) price += 4500;

  // –§–æ—Ä–º–∞
  const shape = document.querySelector('input[name="shape"]:checked')?.parentNode.textContent;
  if (shape?.includes('–¶–∏—Ñ—Ä–∞') || shape?.includes('–±—É–∫–≤–∞')) price += 400;
  else if (shape?.includes('–°–µ—Ä–¥—Ü–µ')) price += 300;
  else if (shape?.includes('–î—Ä—É–≥–æ–µ')) price += 500;

  // –ü—Ä–æ–ø–∏—Ç–∫–∞
  const soak = document.querySelector('input[name="soaking"]:checked')?.parentNode.textContent;
  if (soak && !soak.includes('–ë–µ–∑')) price += 100;

  // –î–∏–∑–∞–π–Ω
  const design = document.querySelector('[data-layer="design"]').textContent;
  if (design.includes('–õ—ë–≥–∫–∏–π')) price += 300;
  else if (design.includes('–°–ª–æ–∂–Ω—ã–π')) price += 800;
  else if (design.includes('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π')) price += 1500;

  // –°–∫–∏–¥–∫–∞
  let discount = 0; // –ø—Ä–∏–º–µ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏, –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å—Ç–∫—É
  const goodsRow = document.querySelector('.price-row:nth-child(2) span:last-child');
  const discountRow = document.querySelector('.price-row:nth-child(3) span:last-child');
  const totalRow = document.querySelector('.price-row.total span:last-child');

  if (goodsRow) goodsRow.textContent = price + ' ‚ÇΩ';
  if (discountRow) discountRow.textContent = discount + ' ‚ÇΩ';
  if (totalRow) totalRow.textContent = (price - discount) + ' ‚ÇΩ';
}


  // üî• –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –æ–ø—Ü–∏–π
  document.querySelectorAll('input[name="count"], input[name="shape"], input[name="soaking"]').forEach(inp => {
    inp.addEventListener('change', updatePrice);
  });

  // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç
  updatePrice();
});
